<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="47" time="83.070" timestamp="2025-04-30T11:40:46.200550+03:00" hostname="Phuongs-MacBook-Pro.local"><properties><property name="hypothesis-statistics-tests/test_api_is_according_to_the_openapi_specification.py::test_api_calls_against_schema" value="dGVzdHMvdGVzdF9hcGlfaXNfYWNjb3JkaW5nX3RvX3RoZV9vcGVuYXBpX3NwZWNpZmljYXRpb24ucHk6OnRlc3RfYXBpX2NhbGxzX2FnYWluc3Rfc2NoZW1hW1BPU1QgL2FwaS9saWJyYXJpZXNdOgoKICAtIGR1cmluZyBnZW5lcmF0ZSBwaGFzZSAoMi44NyBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiAzLTE5IG1zLCBvZiB3aGljaCB+IDEtMTQgbXMgaW4gZGF0YSBnZW5lcmF0aW9uCiAgICAtIDk5IHBhc3NpbmcgZXhhbXBsZXMsIDQgZmFpbGluZyBleGFtcGxlcywgMTQzIGludmFsaWQgZXhhbXBsZXMKICAgIC0gRm91bmQgMSBkaXN0aW5jdCBlcnJvciBpbiB0aGlzIHBoYXNlCiAgICAtIEV2ZW50czoKICAgICAgKiA0MC42NSUsIGludmFsaWQgYmVjYXVzZTogQWJvcnRlZCB0ZXN0IGJlY2F1c2UgdW5hYmxlIHRvIHNhdGlzZnkganVzdCgnYm9va19jb3BpZXMnKS5maWx0ZXIobGFtYmRhIHM6IHMgbm90IGluIG91dCkKICAgICAgKiA5LjM1JSwgUmV0cmllZCBkcmF3IGZyb20gdGV4dChjaGFyYWN0ZXJzKGNvZGVjPSd1dGYtOCcsIGNhdGVnb3JpZXM9KCdabCcsICdacCcsICdDbycsICdNZScsICdQYycsICdacycsICdMdCcsICdQZicsICdQaScsICdObCcsICdQZCcsICdDZicsICdTYycsICdTaycsICdOZCcsICdTbScsICdMbScsICdObycsICdQZScsICdQcycsICdNYycsICdTbycsICdQbycsICdNbicsICdMbycsICdMdScsICdMbCcsICdDbicsICdDYycpKSkuZmlsdGVyKG5vdF95ZXRfaW5fdW5pcXVlX2xpc3QpIHRvIHNhdGlzZnkgZmlsdGVyCiAgICAgICogNC4wNyUsIFJldHJpZWQgZHJhdyBmcm9tIHRleHQoY2hhcmFjdGVycyhjb2RlYz0ndXRmLTgnLCBtaW5fY29kZXBvaW50PTApKS5maWx0ZXIobGFtYmRhIHM6IHMgbm90IGluIG91dCkgdG8gc2F0aXNmeSBmaWx0ZXIKICAgICAgKiAwLjQxJSwgaW52YWxpZCBiZWNhdXNlOiBBYm9ydGVkIHRlc3QgYmVjYXVzZSB1bmFibGUgdG8gc2F0aXNmeSB0ZXh0KGNoYXJhY3RlcnMoY29kZWM9J3V0Zi04JywgbWluX2NvZGVwb2ludD0wKSkuZmlsdGVyKGxhbWJkYSBzOiBzIG5vdCBpbiBvdXQpCgogIC0gZHVyaW5nIHNocmluayBwaGFzZSAoMy43MiBzZWNvbmRzKToKICAgIC0gVHlwaWNhbCBydW50aW1lczogfiAzLTE1IG1zLCBvZiB3aGljaCB+IDItNiBtcyBpbiBkYXRhIGdlbmVyYXRpb24KICAgIC0gMTA2IHBhc3NpbmcgZXhhbXBsZXMsIDEyMyBmYWlsaW5nIGV4YW1wbGVzLCA2NiBpbnZhbGlkIGV4YW1wbGVzCiAgICAtIFRyaWVkIDI5NSBzaHJpbmtzIG9mIHdoaWNoIDExOCB3ZXJlIHN1Y2Nlc3NmdWwKCiAgLSBTdG9wcGVkIGJlY2F1c2Ugbm90aGluZyBsZWZ0IHRvIGRv" /></properties><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema" time="81.213" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/publishers/{id}]" time="1.380" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/publishers/{id}]" time="2.285" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/publishers/{id}]" time="2.683" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/publishers/{id}]" time="0.795" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/publishers]" time="0.011" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/publishers]" time="2.276" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/books/{id}]" time="0.868" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/books/{id}]" time="2.561" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/books/{id}]" time="3.771" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/books/{id}]" time="0.862" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/books]" time="0.010" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/books]" time="2.784" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/gated-authors/{id}]" time="0.738" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/gated-authors/{id}]" time="2.151" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/gated-authors/{id}]" time="2.229" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/gated-authors/{id}]" time="0.806" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/gated-authors]" time="0.008" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/gated-authors]" time="2.220" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/authors/{id}]" time="0.788" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/authors/{id}]" time="2.557" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/authors/{id}]" time="2.460" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/authors/{id}]" time="0.862" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/authors]" time="0.007" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/authors]" time="1.354"><failure message="schemathesis.exceptions.CheckFailed: &#10;&#10;1. Server error&#10;&#10;2. Undocumented HTTP status code&#10;&#10;    Received: 500&#10;    Documented: 201, 401, 403, 404, 409, 422, 503, 429&#10;&#10;[500] Internal Server Error:&#10;&#10;    `A server error occurred.  Please contact the administrator.`&#10;&#10;Reproduce with: &#10;&#10;    curl -X POST -H 'Content-Type: application/json' -d '{&quot;name&quot;: &quot;0&quot;, &quot;amazon_author_profile&quot;: 0}' http://0.0.0.0:8080/api/authors&#10;&#10;Falsifying example: test_api_calls_against_schema(&#10;    live_server=&lt;LiveServer listening at http://0.0.0.0:8080&gt;,&#10;    case=,&#10;)">live_server = &lt;LiveServer listening at http://0.0.0.0:8080&gt;

    @wraps(test)
&gt;   def test_function(*args: Any, **kwargs: Any) -&gt; Any:

../.venv/lib/python3.12/site-packages/schemathesis/_hypothesis.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

case = Case(body={'name': '0', 'amazon_author_profile': 0})
live_server = &lt;LiveServer listening at http://0.0.0.0:8080&gt;

    @pytest.mark.django_db
    @schema.parametrize()  # pyright: ignore[reportUnknownMemberType, reportUntypedFunctionDecorator]
    def test_api_calls_against_schema(
        case: schemathesis.Case,
        live_server: LiveServer,  # this starts the needed live server so # noqa: ARG001
    ) -&gt; None:
        """Test API calls using the generated OpenAPI schema and the schemathesis library.
    
        Schemathesis is a tool that levels-up your API testing by automating the process of
        finding crashes, uncovering bugs, and validating spec compliance.
    
        With Schemathesis, you can:
    
        #x1F3AF Catch Hard-to-Find Bugs
    
        Uncover hidden crashes and edge cases that manual testing might miss
        Identify spec violations and ensure your API adheres to its defined contra
    
        Parameters
        ----------
        case: schemathesis.Case
            The generated test case.
        live_server: LiveServer
            The Django live server fixture from the pytest-django plugin.
    
        """
        import json
    
        print("~~~ Path:")
        if isinstance(case.path_parameters, dict):
            print(json.dumps(case.path_parameters, indent=2))
        else:
            print(case.path_parameters)
    
        print("### Body:")
        if isinstance(case.body, dict):
            print(json.dumps(case.body, indent=2))
        else:
            print(case.body)
    
        print("============================================================")
    
&gt;       case.call_and_validate()  # we do not need the return value
E       schemathesis.exceptions.CheckFailed: 
E       
E       1. Server error
E       
E       2. Undocumented HTTP status code
E       
E           Received: 500
E           Documented: 201, 401, 403, 404, 409, 422, 503, 429
E       
E       [500] Internal Server Error:
E       
E           `A server error occurred.  Please contact the administrator.`
E       
E       Reproduce with: 
E       
E           curl -X POST -H 'Content-Type: application/json' -d '{"name": "0", "amazon_author_profile": 0}' http://0.0.0.0:8080/api/authors
E       
E       Falsifying example: test_api_calls_against_schema(
E           live_server=&lt;LiveServer listening at http://0.0.0.0:8080&gt;,
E           case=,
E       )

test_api_is_according_to_the_openapi_specification.py:92: CheckFailed</failure></testcase><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/amazon_author_profiles/{id}]" time="0.781" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/amazon_author_profiles/{id}]" time="2.935" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/amazon_author_profiles/{id}]" time="2.872" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/amazon_author_profiles/{id}]" time="0.777" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/amazon_author_profiles]" time="0.007" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/amazon_author_profiles]" time="2.532" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/book_copies/{id}]" time="2.665" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/book_copies/{id}]" time="2.969" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/book_copies/{id}]" time="0.792" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/book_copies]" time="0.007" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/book_copies]" time="3.434" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/borrowings/{id}]" time="2.701" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/borrowings/{id}]" time="2.516" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/borrowings/{id}]" time="0.786" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/borrowings]" time="0.007" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/borrowings]" time="3.081" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[DELETE /api/libraries/{id}]" time="0.784" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PATCH /api/libraries/{id}]" time="2.430" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[PUT /api/libraries/{id}]" time="3.104" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/libraries/{id}]" time="0.795" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[GET /api/libraries]" time="0.007" /><testcase classname="tests.test_api_is_according_to_the_openapi_specification" name="test_api_calls_against_schema[POST /api/libraries]" time="6.607"><failure message="schemathesis.exceptions.CheckFailed: &#10;&#10;1. Server error&#10;&#10;2. Undocumented HTTP status code&#10;&#10;    Received: 500&#10;    Documented: 201, 401, 403, 404, 409, 422, 503, 429&#10;&#10;[500] Internal Server Error:&#10;&#10;    `A server error occurred.  Please contact the administrator.`&#10;&#10;Reproduce with: &#10;&#10;    curl -X POST -H 'Content-Type: application/json' -d '{&quot;address&quot;: &quot;0&quot;, &quot;name&quot;: &quot;0&quot;, &quot;book_copies&quot;: [9223372036854775808]}' http://0.0.0.0:8080/api/libraries&#10;&#10;Falsifying example: test_api_calls_against_schema(&#10;    live_server=&lt;LiveServer listening at http://0.0.0.0:8080&gt;,&#10;    case=,&#10;)">live_server = &lt;LiveServer listening at http://0.0.0.0:8080&gt;

    @wraps(test)
&gt;   def test_function(*args: Any, **kwargs: Any) -&gt; Any:

../.venv/lib/python3.12/site-packages/schemathesis/_hypothesis.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

case = Case(body={'address': '0', 'name': '0', 'book_copies': [9223372036854775808]})
live_server = &lt;LiveServer listening at http://0.0.0.0:8080&gt;

    @pytest.mark.django_db
    @schema.parametrize()  # pyright: ignore[reportUnknownMemberType, reportUntypedFunctionDecorator]
    def test_api_calls_against_schema(
        case: schemathesis.Case,
        live_server: LiveServer,  # this starts the needed live server so # noqa: ARG001
    ) -&gt; None:
        """Test API calls using the generated OpenAPI schema and the schemathesis library.
    
        Schemathesis is a tool that levels-up your API testing by automating the process of
        finding crashes, uncovering bugs, and validating spec compliance.
    
        With Schemathesis, you can:
    
        #x1F3AF Catch Hard-to-Find Bugs
    
        Uncover hidden crashes and edge cases that manual testing might miss
        Identify spec violations and ensure your API adheres to its defined contra
    
        Parameters
        ----------
        case: schemathesis.Case
            The generated test case.
        live_server: LiveServer
            The Django live server fixture from the pytest-django plugin.
    
        """
        import json
    
        print("~~~ Path:")
        if isinstance(case.path_parameters, dict):
            print(json.dumps(case.path_parameters, indent=2))
        else:
            print(case.path_parameters)
    
        print("### Body:")
        if isinstance(case.body, dict):
            print(json.dumps(case.body, indent=2))
        else:
            print(case.body)
    
        print("============================================================")
    
&gt;       case.call_and_validate()  # we do not need the return value
E       schemathesis.exceptions.CheckFailed: 
E       
E       1. Server error
E       
E       2. Undocumented HTTP status code
E       
E           Received: 500
E           Documented: 201, 401, 403, 404, 409, 422, 503, 429
E       
E       [500] Internal Server Error:
E       
E           `A server error occurred.  Please contact the administrator.`
E       
E       Reproduce with: 
E       
E           curl -X POST -H 'Content-Type: application/json' -d '{"address": "0", "name": "0", "book_copies": [9223372036854775808]}' http://0.0.0.0:8080/api/libraries
E       
E       Falsifying example: test_api_calls_against_schema(
E           live_server=&lt;LiveServer listening at http://0.0.0.0:8080&gt;,
E           case=,
E       )

test_api_is_according_to_the_openapi_specification.py:92: CheckFailed</failure></testcase></testsuite></testsuites>